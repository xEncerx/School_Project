from aiogram import types, Dispatcher
import markups as nav
from markups import cb
from bot_data import db, bot
from utils.message_utils import text_editor
from datetime import datetime

async def active_task(call: types.CallbackQuery):
    await text_editor(text="<b>COMING SOON...</b>",
                      call=call,
                      markup=nav.active_task_menu(db.get_client_data(call.from_user.id)[6]))

async def accept(call: types.CallbackQuery):
    db_time = datetime.strptime(db.get_task_data("end_time", call.data[7:]), "%Y-%m-%d %H:%M:%S")
    if len(db.get_client_data(call.from_user.id)[6]) < 1 and datetime.now() <= db_time:
        action = call.data[7:]
        db.update_data(call.from_user.id, "active_task", action)
        try:
            await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
            await bot.send_message(call.from_user.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å ID: <b>{action}</b> –≤ —Ä–∞–±–æ—Ç—É", parse_mode=types.ParseMode.HTML, reply_markup=nav.back_button("main_menu"))
        except:
            await text_editor(text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Å ID: <b>{action}</b> –≤ —Ä–∞–±–æ—Ç—É",
                              call=call, markup=nav.back_button("main_menu"))
    elif len(db.get_client_data(call.from_user.id)[6]) >= 1:
        await call.answer("–í —Ä–∞–±–æ—Ç—É –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —Ç–æ–ª—å–∫–æ 1 –∑–∞–¥–∞–Ω–∏–µ!", show_alert=True)
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    elif datetime.now() > db_time:
        await call.answer("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ", show_alert=True)
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.answer()

async def reject(call: types.CallbackQuery):
    await text_editor(text=f"üëã –ü—Ä–∏–≤–µ—Ç, {call.from_user.first_name}",
                      call=call,
                      markup=nav.main_keyboard(call.from_user.id))
    await call.answer()

async def enter_task_menu(call: types.CallbackQuery):
    action = call.data[8:]
    file_id = db.get_task_data("file_id", action)
    text = db.get_task_data("text", action)
    time = db.get_task_data("end_time", action)
    price = db.get_task_data("price", action)
    match db.get_task_data("file_type", action):
        case None:
            if db.get_task_data("text") is not None:
                await bot.send_message(chat_id=call.from_user.id,
                                       text=f"{text}\n\n–¶–µ–Ω–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {price} –º–æ–Ω–µ—Ç\n"
                                            f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ {time}",
                                       reply_markup=nav.back_button("main_menu"))
        case "photo":
            if db.get_task_data("text") is not None:
                await bot.send_photo(chat_id=call.from_user.id, photo=file_id,
                                     caption=f"{text}\n\n–¶–µ–Ω–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {price} –º–æ–Ω–µ—Ç\n"
                                             f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ {time}",
                                     reply_markup=nav.back_button("main_menu"))
        case "document":
            if db.get_task_data("text") is not None:
                await bot.send_document(chat_id=call.from_user.id, document=file_id,
                                        caption=f"{text}\n\n–¶–µ–Ω–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {price} –º–æ–Ω–µ—Ç\n"
                                                f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ {time}",
                                        reply_markup=nav.back_button("main_menu"))
        case "video":
            if db.get_task_data("text") is not None:
                await bot.send_video(chat_id=call.from_user.id, video=file_id,
                                     caption=f"{text}\n\n–¶–µ–Ω–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {price} –º–æ–Ω–µ—Ç\n"
                                             f"–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ {time}",
                                     reply_markup=nav.back_button("main_menu"))
    await call.answer()

def register_handlers_active_task(dp: Dispatcher):
    dp.register_callback_query_handler(active_task, cb.filter(action="active_tasks"))
    dp.register_callback_query_handler(accept, text_contains="accept")
    dp.register_callback_query_handler(reject, text="reject")
    dp.register_callback_query_handler(enter_task_menu, text_contains="task_id")