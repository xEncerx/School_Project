from aiogram import types, Dispatcher
import markups as nav
from markups import cb
from bot_data import db
from utils.message_utils import text_editor
from aiogram.dispatcher import FSMContext

async def back(call: types.CallbackQuery, state: FSMContext):
    action = call.data[5:]
    match action:
        case "main_menu":
            await text_editor(call=call, text="üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", markup=nav.main_keyboard(call.from_user.id))
        case "profile_menu":
            await text_editor(text="–ü—Ä–æ—Ñ–∏–ª—å:\n"
                                   "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                   f"üîñ –ò–º—è: <b>{call.from_user.first_name}</b>\n"
                                   f"üîñ Username: @{call.from_user.username}\n"
                                   f"üÜî ID: <b>{call.from_user.id}</b>\n"
                                   f"üìÉ –ö–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è: <b>{'–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è' if db.get_client_data(call.from_user.id)[4] == '' else db.get_client_data(call.from_user.id)[4]}</b>\n"
                                   f"üí∞Balance: <b>{db.get_client_data(call.from_user.id)[1]}</b>\n"
                                   f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: <b>0</b>\n"
                                   f"üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: <b>0</b>\n"
                                   "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ",
                              call=call,
                              markup=nav.profile_keyboard1())
        case "shop_menu":
            await text_editor(text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –º–æ–Ω–µ—Ç—ã:</b>", call=call,
                              markup=nav.show_shop_list(db.get_shop_list()))

        case "admin_menu":
            await text_editor(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω –ú–µ–Ω—é:", call=call, markup=nav.admin_menu())

        case "cancle_create_task":
            if await state.get_state() is not None:
                await state.finish()
            db.delete_task()
            await text_editor(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω –ú–µ–Ω—é:", call=call, markup=nav.admin_menu())

        case "create_task_menu":
            await text_editor(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:\n"
                                   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", call=call,
                              markup=nav.createTask_menu())
        case "cancle_data":
            if await state.get_state() is not None:
                await state.finish()
            await text_editor(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π:\n"
                                   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", call=call,
                              markup=nav.createTask_menu())
    await call.answer()

def register_handlers_back(dp: Dispatcher):
    dp.register_callback_query_handler(back, text_contains="back", state="*")